#pragma once

namespace game
{
	typedef float vec_t;
	typedef vec_t vec2_t[2];
	typedef vec_t vec3_t[3];
	typedef vec_t vec4_t[4];

	typedef uint32_t dvarStrHash_t;
	typedef uint32_t ScrString_t;
	typedef int16_t BoneIndex;
	struct dvar_t;

	enum dvarType_t : __int32
	{
		DVAR_TYPE_INVALID = 0x0,
		DVAR_TYPE_BOOL = 0x1,
		DVAR_TYPE_FLOAT = 0x2,
		DVAR_TYPE_FLOAT_2 = 0x3,
		DVAR_TYPE_FLOAT_3 = 0x4,
		DVAR_TYPE_FLOAT_4 = 0x5,
		DVAR_TYPE_INT = 0x6,
		DVAR_TYPE_ENUM = 0x7,
		DVAR_TYPE_STRING = 0x8,
		DVAR_TYPE_COLOR = 0x9,
		DVAR_TYPE_INT64 = 0xA,
		DVAR_TYPE_UINT64 = 0xB,
		DVAR_TYPE_LINEAR_COLOR_RGB = 0xC,
		DVAR_TYPE_COLOR_XYZ = 0xD,
		DVAR_TYPE_COLOR_LAB = 0xE,
		DVAR_TYPE_SESSIONMODE_BASE_DVAR = 0xF,
		DVAR_TYPE_COUNT = 0x10,
	};

	enum consoleLabel_e : __int32
	{
		CON_LABEL_DEFAULT_0 = 0x0,
		CON_LABEL_TEMP_0 = 0x1,
		CON_LABEL_GFX_0 = 0x2,
		CON_LABEL_TASKMGR2_0 = 0x3,
		CON_LABEL_LIVE_0 = 0x4,
		CON_LABEL_DEMONWARE_0 = 0x5,
		CON_LABEL_LEADERBOARDS_0 = 0x6,
		CON_LABEL_LOBBY_0 = 0x7,
		CON_LABEL_LOBBYHOST_0 = 0x8,
		CON_LABEL_LOBBYCLIENT_0 = 0x9,
		CON_LABEL_LOBBYVM_0 = 0xA,
		CON_LABEL_MIGRATION_0 = 0xB,
		CON_LABEL_INGAME_MIGRATION_HOST_0 = 0xC,
		CON_LABEL_INGAME_MIGRATION_CLIENT_0 = 0xD,
		CON_LABEL_SCRIPTER_0 = 0xE,
		CON_LABEL_VM_0 = 0xF,
		CON_LABEL_DVAR_0 = 0x10,
		CON_LABEL_TOOL_0 = 0x11,
		CON_LABEL_ANIM_0 = 0x12,
		CON_LABEL_NETCHAN_0 = 0x13,
		CON_LABEL_BG_CACHE_0 = 0x14,
		CON_LABEL_PM_0 = 0x15,
		CON_LABEL_MAPSWITCH_0 = 0x16,
		CON_LABEL_AI_0 = 0x17,
		CON_LABEL_GADGET_0 = 0x18,
		CON_LABEL_SOUND_0 = 0x19,
		CON_LABEL_SNAPSHOT_0 = 0x1A,
		CON_LABEL_PLAYGO_0 = 0x1B,
		CON_LABEL_LUI_0 = 0x1C,
		CON_LABEL_LUA_0 = 0x1D,
		CON_LABEL_VOICE_0 = 0x1E,
		CON_LABEL_DEMO_0 = 0x1F,
		CON_LABEL_DB_0 = 0x20,
		CON_LABEL_HTTP_0 = 0x21,
		CON_LABEL_COMPANION_0 = 0x22,
		CON_LABEL_MEM_0 = 0x23,
		CON_LABEL_CINEMATIC_0 = 0x24,
		CON_LABEL_DDL_0 = 0x25,
		CON_LABEL_STORAGE_0 = 0x26,
		CON_LABEL_STEAM_0 = 0x27,
		CON_LABEL_CHECKPOINT_0 = 0x28,
		CON_LABEL_THUNDERHEAD_0 = 0x29,
		CON_LABEL_COMSCORE_0 = 0x2A,
		CON_LABEL_FILESHARE_0 = 0x2B,
		CON_LABEL_LPC_0 = 0x2C,
		CON_LABEL_MARKETING_0 = 0x2D,
		CON_LABEL_STORE_0 = 0x2E,
		CON_LABEL_TESTING_0 = 0x2F,
		CON_LABEL_COUNT_0 = 0x30,
	};

	enum XAssetType : __int32
	{
		ASSET_TYPE_PHYSPRESET = 0x0,
		ASSET_TYPE_PHYSCONSTRAINTS = 0x1,
		ASSET_TYPE_DESTRUCTIBLEDEF = 0x2,
		ASSET_TYPE_XANIMPARTS = 0x3,
		ASSET_TYPE_XMODEL = 0x4,
		ASSET_TYPE_XMODELMESH = 0x5,
		ASSET_TYPE_MATERIAL = 0x6,
		ASSET_TYPE_COMPUTE_SHADER_SET = 0x7,
		ASSET_TYPE_TECHNIQUE_SET = 0x8,
		ASSET_TYPE_IMAGE = 0x9,
		ASSET_TYPE_SOUND = 0xA,
		ASSET_TYPE_SOUND_PATCH = 0xB,
		ASSET_TYPE_CLIPMAP = 0xC,
		ASSET_TYPE_COMWORLD = 0xD,
		ASSET_TYPE_GAMEWORLD = 0xE,
		ASSET_TYPE_MAP_ENTS = 0xF,
		ASSET_TYPE_GFXWORLD = 0x10,
		ASSET_TYPE_LIGHT_DEF = 0x11,
		ASSET_TYPE_LENSFLARE_DEF = 0x12,
		ASSET_TYPE_UI_MAP = 0x13,
		ASSET_TYPE_FONT = 0x14,
		ASSET_TYPE_FONTICON = 0x15,
		ASSET_TYPE_LOCALIZE_ENTRY = 0x16,
		ASSET_TYPE_WEAPON = 0x17,
		ASSET_TYPE_WEAPONDEF = 0x18,
		ASSET_TYPE_WEAPON_VARIANT = 0x19,
		ASSET_TYPE_WEAPON_FULL = 0x1A,
		ASSET_TYPE_CGMEDIA = 0x1B,
		ASSET_TYPE_PLAYERSOUNDS = 0x1C,
		ASSET_TYPE_PLAYERFX = 0x1D,
		ASSET_TYPE_SHAREDWEAPONSOUNDS = 0x1E,
		ASSET_TYPE_ATTACHMENT = 0x1F,
		ASSET_TYPE_ATTACHMENT_UNIQUE = 0x20,
		ASSET_TYPE_WEAPON_CAMO = 0x21,
		ASSET_TYPE_CUSTOMIZATION_TABLE = 0x22,
		ASSET_TYPE_CUSTOMIZATION_TABLE_FE_IMAGES = 0x23,
		ASSET_TYPE_CUSTOMIZATION_TABLE_COLOR = 0x24,
		ASSET_TYPE_SNDDRIVER_GLOBALS = 0x25,
		ASSET_TYPE_FX = 0x26,
		ASSET_TYPE_TAGFX = 0x27,
		ASSET_TYPE_NEW_LENSFLARE_DEF = 0x28,
		ASSET_TYPE_IMPACT_FX = 0x29,
		ASSET_TYPE_IMPACT_SOUND = 0x2A,
		ASSET_TYPE_PLAYER_CHARACTER = 0x2B,
		ASSET_TYPE_AITYPE = 0x2C,
		ASSET_TYPE_CHARACTER = 0x2D,
		ASSET_TYPE_XMODELALIAS = 0x2E,
		ASSET_TYPE_RAWFILE = 0x2F,
		ASSET_TYPE_STRINGTABLE = 0x30,
		ASSET_TYPE_STRUCTURED_TABLE = 0x31,
		ASSET_TYPE_LEADERBOARD = 0x32,
		ASSET_TYPE_DDL = 0x33,
		ASSET_TYPE_GLASSES = 0x34,
		ASSET_TYPE_TEXTURELIST = 0x35,
		ASSET_TYPE_SCRIPTPARSETREE = 0x36,
		ASSET_TYPE_KEYVALUEPAIRS = 0x37,
		ASSET_TYPE_VEHICLEDEF = 0x38,
		ASSET_TYPE_ADDON_MAP_ENTS = 0x39,
		ASSET_TYPE_TRACER = 0x3A,
		ASSET_TYPE_SLUG = 0x3B,
		ASSET_TYPE_SURFACEFX_TABLE = 0x3C,
		ASSET_TYPE_SURFACESOUNDDEF = 0x3D,
		ASSET_TYPE_FOOTSTEP_TABLE = 0x3E,
		ASSET_TYPE_ENTITYFXIMPACTS = 0x3F,
		ASSET_TYPE_ENTITYSOUNDIMPACTS = 0x40,
		ASSET_TYPE_ZBARRIER = 0x41,
		ASSET_TYPE_VEHICLEFXDEF = 0x42,
		ASSET_TYPE_VEHICLESOUNDDEF = 0x43,
		ASSET_TYPE_TYPEINFO = 0x44,
		ASSET_TYPE_SCRIPTBUNDLE = 0x45,
		ASSET_TYPE_SCRIPTBUNDLELIST = 0x46,
		ASSET_TYPE_RUMBLE = 0x47,
		ASSET_TYPE_BULLETPENETRATION = 0x48,
		ASSET_TYPE_LOCDMGTABLE = 0x49,
		ASSET_TYPE_AIMTABLE = 0x4A,
		ASSET_TYPE_ANIMSELECTORTABLESET = 0x4B,
		ASSET_TYPE_ANIMMAPPINGTABLE = 0x4C,
		ASSET_TYPE_ANIMSTATEMACHINE = 0x4D,
		ASSET_TYPE_BEHAVIORTREE = 0x4E,
		ASSET_TYPE_BEHAVIORSTATEMACHINE = 0x4F,
		ASSET_TYPE_TTF = 0x50,
		ASSET_TYPE_SANIM = 0x51,
		ASSET_TYPE_LIGHT_DESCRIPTION = 0x52,
		ASSET_TYPE_SHELLSHOCK = 0x53,
		ASSET_TYPE_XCAM = 0x54,
		ASSET_TYPE_BG_CACHE = 0x55,
		ASSET_TYPE_TEXTURE_COMBO = 0x56,
		ASSET_TYPE_FLAMETABLE = 0x57,
		ASSET_TYPE_BITFIELD = 0x58,
		ASSET_TYPE_ATTACHMENT_COSMETIC_VARIANT = 0x59,
		ASSET_TYPE_MAPTABLE = 0x5A,
		ASSET_TYPE_MAPTABLE_LOADING_IMAGES = 0x5B,
		ASSET_TYPE_MEDAL = 0x5C,
		ASSET_TYPE_MEDALTABLE = 0x5D,
		ASSET_TYPE_OBJECTIVE = 0x5E,
		ASSET_TYPE_OBJECTIVE_LIST = 0x5F,
		ASSET_TYPE_UMBRA_TOME = 0x60,
		ASSET_TYPE_NAVMESH = 0x61,
		ASSET_TYPE_NAVVOLUME = 0x62,
		ASSET_TYPE_BINARYHTML = 0x63,
		ASSET_TYPE_LASER = 0x64,
		ASSET_TYPE_BEAM = 0x65,
		ASSET_TYPE_STREAMER_HINT = 0x66,
		ASSET_TYPE_COUNT = 0x67,
		ASSET_TYPE_STRING = 0x68,
		ASSET_TYPE_ASSETLIST = 0x69,
		ASSET_TYPE_REPORT = 0x6A,
		ASSET_TYPE_DEPEND = 0x68,
		ASSET_TYPE_FULL_COUNT = 0x6C,
	};

	enum ControllerIndex_t : int
	{
		INVALID_CONTROLLER_PORT = -1,
		CONTROLLER_INDEX_0 = 0x0,
		CONTROLLER_INDEX_FIRST = 0x0,
		CONTROLLER_INDEX_1 = 0x1,
		CONTROLLER_INDEX_2 = 0x2,
		CONTROLLER_INDEX_3 = 0x3,
		CONTROLLER_INDEX_COUNT = 0x4,
	};

	enum eGameModes : __int32
	{
		MODE_GAME_MATCHMAKING_PLAYLIST = 0x0,
		MODE_GAME_MATCHMAKING_MANUAL = 0x1,
		MODE_GAME_DEFAULT = 0x2,
		MODE_GAME_LEAGUE = 0x3,
		MODE_GAME_THEATER = 0x4,
		MODE_GAME_COUNT = 0x5,
		MODE_GAME_INVALID = 0x5,
	};

	enum eModes : __int32
	{
		MODE_ZOMBIES = 0x0,
		MODE_MULTIPLAYER = 0x1,
		MODE_CAMPAIGN = 0x2,
		MODE_COUNT = 0x3,
		MODE_INVALID = 0x3,
		MODE_FIRST = 0x0,
	};

	enum LobbyClientType : __int32
	{
		LOBBY_CLIENT_TYPE_INVALID = -1,
		LOBBY_CLIENT_TYPE_ALL = 0x0,
		LOBBY_CLIENT_TYPE_LOCAL = 0x1,
		LOBBY_CLIENT_TYPE_REMOTE = 0x2,
		LOBBY_CLIENT_TYPE_SPLITSCREEN_ALL = 0x3,
		LOBBY_CLIENT_TYPE_SPLITSCREEN_REMOTE = 0x2,
		LOBBY_CLIENT_TYPE_GUEST = 0x2,
	};

	enum LocalClientNum_t : __int32
	{
		INVALID_LOCAL_CLIENT = -1,
		LOCAL_CLIENT_0 = 0x0,
		LOCAL_CLIENT_FIRST = 0x0,
		LOCAL_CLIENT_KEYBOARD_AND_MOUSE = 0x0,
		LOCAL_CLIENT_1 = 0x1,
		LOCAL_CLIENT_2 = 0x2,
		LOCAL_CLIENT_3 = 0x3,
		LOCAL_CLIENT_COUNT = 0x4,
	};

	struct AssetLink
	{
		AssetLink* next;
	};

	struct XAssetPool
	{
		void* pool;
		unsigned int itemSize;
		int itemCount;
		bool isSingleton[4];
		int itemAllocCount;
		AssetLink* freeHead;
	};

	union DvarValue
	{
		bool enabled;
		int integer;
		UINT unsignedInt;
		int64_t integer64;
		uint64_t unsignedInt64;
		float value;
		vec4_t vector;
		const char* string;
		BYTE color[4];
		const dvar_t* indirect[3];
	};

	struct $7034703ED3857507327AE195CCA24A71
	{
		int stringCount;
		const char** strings;
	};

	struct $5AC0CC375C7A91894540A0C75867866C
	{
		int min;
		int max;
	};

	struct $FCEE86E78F1A35297637B00F6DD148A3
	{
		int64_t min;
		int64_t max;
	};

	struct $28DE879AA85D5F4AA5DF9392CB197229
	{
		uint64_t min;
		uint64_t max;
	};

	struct $D2B45DCE3C73414E1DE8E10A2D52B392
	{
		float min;
		float max;
	};

	struct $97F25DA469865168FD08682F42882F2A
	{
		vec_t min;
		vec_t max;
	};

	union DvarLimits
	{
		$7034703ED3857507327AE195CCA24A71 enumeration;
		$5AC0CC375C7A91894540A0C75867866C integer;
		$FCEE86E78F1A35297637B00F6DD148A3 integer64;
		$28DE879AA85D5F4AA5DF9392CB197229 unsignedInt64;
		$D2B45DCE3C73414E1DE8E10A2D52B392 value;
		$97F25DA469865168FD08682F42882F2A vector;
	};

	enum CriticalSection : __int32
	{
		CRITSECT_ALLOC_MARK = 0x0,
		CRITSECT_FX_VIS = 0x1,
		CRITSECT_OCCLUSION_QUERY = 0x2,
		CRITSECT_PHYSICS = 0x3,
		CRITSECT_PHYSICS_UPDATE = 0x4,
		CRITSECT_PHYSICS_DESTRUCTIBLE_HIT = 0x5,
		CRITSECT_STREAM_ALLOC = 0x6,
		CRITSECT_STREAM_BACKEND_UPDATE = 0x7,
		CRITSECT_STREAM_CANCEL = 0x8,
		CRITSECT_STREAM_MODEL_BITS = 0x9,
		CRITSECT_FX_CHUNK_ALLOC = 0xA,
		CRITSECT_FX_UNIQUE_HANDLE = 0xB,
		CRITSECT_SOUND_COMMAND_ALLOC = 0xC,
		CRITSECT_SOUND_COMMAND_PUSH = 0xD,
		CRITSECT_SOUND_NOTIFY_ALLOC = 0xE,
		CRITSECT_SOUND_NOTIFY_PUSH = 0xF,
		CRITSECT_SOUND_BANK = 0x10,
		CRITSECT_SOUND_LOOKUP_CACHE = 0x11,
		CRITSECT_SOUND_SUBMIT = 0x12,
		CRITSECT_CAREER_STATS = 0x13,
		CRITSECT_CONSOLE = 0x14,
		CRITSECT_DEBUG_SOCKET = 0x15,
		CRITSECT_COM_ERROR = 0x16,
		CRITSECT_STATMON = 0x17,
		CRITSECT_MEM_ALLOC0 = 0x18,
		CRITSECT_MEM_ALLOC1 = 0x19,
		CRITSECT_MEM_ALLOC2 = 0x1A,
		CRITSECT_MEM_ALLOC3 = 0x1B,
		CRITSECT_MEM_ALLOC4 = 0x1C,
		CRITSECT_MEM_ALLOC5 = 0x1D,
		CRITSECT_MEM_ALLOC6 = 0x1E,
		CRITSECT_MEM_ALLOC7 = 0x1F,
		CRITSECT_MEM_ALLOC8 = 0x20,
		CRITSECT_MEM_ASYNC_COMMIT = 0x21,
		CRITSECT_DEBUG_LINE = 0x22,
		CRITSECT_DEBUG_BRUSHES_AND_PATCHES = 0x23,
		CRITSECT_DEBUG_HAVOK_AI = 0x24,
		CRITSECT_CLIENT_MESSAGE = 0x25,
		CRITSECT_CLIENT_CMD = 0x26,
		CRITSECT_DOBJ_ALLOC = 0x27,
		CRITSECT_XANIM_ALLOC = 0x28,
		CRITSECT_KEY_BINDINGS = 0x29,
		CRITSECT_SERVER_MESSAGE = 0x2A,
		CRITSECT_SERVER_PLAYERINFO = 0x2B,
		CRITSECT_SERVER_TICK = 0x2C,
		CRITSECT_SCRIPT_STRING = 0x2D,
		CRITSECT_MEMORY_TREE = 0x2E,
		CRITSECT_ASSERT = 0x2F,
		CRITSECT_SCRIPT_DEBUGGER = 0x30,
		CRITSECT_VM = 0x31,
		CRITSECT_THREADED_NOTIFY_QUEUE = 0x32,
		CRITSECT_MISSING_ASSET = 0x33,
		CRITSECT_LIVE = 0x34,
		CRITSECT_PCACHE = 0x35,
		CRITSECT_AUDIO_PHYSICS = 0x36,
		CRITSECT_LUA = 0x37,
		CRITSECT_LUI = 0x38,
		CRITSECT_LOBBY_LUA = 0x39,
		CRITSECT_EXTRACAM = 0x3A,
		CRITSECT_CINEMATIC = 0x3B,
		CRITSECT_CINEMATIC_MP4 = 0x3C,
		CRITSECT_CINEMATIC_UPDATEFRAME = 0x3D,
		CRITSECT_SAVE_PROFILE = 0x3E,
		CRITSECT_MEM_CONTAINER_SAVEGAME = 0x3F,
		CRITSECT_VIRTUALALLOC = 0x40,
		CRITSECT_RB_TRANSFER = 0x41,
		CRITSECT_STREAM_SYNC_COMMAND = 0x42,
		CRITSECT_STREAM_FIXEDIMAGE_UPDATE = 0x43,
		CRITSECT_STREAM_MODELHINT_UPDATE = 0x44,
		CRITSECT_NETTHREAD_OVERRIDE = 0x45,
		CRITSECT_DWLSG = 0x46,
		CRITSECT_DWNET = 0x47,
		CRITSECT_IK = 0x48,
		CRITSECT_TL_MEMALLOC = 0x49,
		CRITSECT_VA_ALLOC = 0x4A,
		CRITSECT_MEMTRACK = 0x4B,
		CRITSECT_CBUF = 0x4C,
		CRITSECT_CURVEALLOC = 0x4D,
		CRITSECT_NETQUEUE = 0x4E,
		CRITSECT_ZLIB = 0x4F,
		CRITSECT_BLACKBOX = 0x50,
		CRITSECT_GDT_COMMAND = 0x51,
		CRITSECT_STRINGED_COMMAND = 0x52,
		CRITSECT_RADIANT_SERVER_COMMAND = 0x53,
		CRITSECT_RADIANT_CLIENT_COMMAND = 0x54,
		CRITSECT_RECORDER = 0x55,
		CRITSECT_SERVERDEMO = 0x56,
		CRITSECT_IO_SCHEDULER = 0x57,
		CRITSECT_FILE_ID_ARRAY = 0x58,
		CRITSECT_MEMFIRSTFIT = 0x59,
		CRITSECT_FXBEAM = 0x5A,
		CRITSECT_GLASS_ACTIONS = 0x5B,
		CRITSECT_DBHASH = 0x5C,
		CRITSECT_DEVHOST = 0x5D,
		CRITSECT_CLUMP = 0x5E,
		CRITSECT_SNAPSHOT_PROFILE = 0x5F,
		CRITSEC_WEBM_STREAM_ACCESS = 0x60,
		CRITSEC_SV_LEADERBOARDS = 0x61,
		CRITSECT_FONT_CACHE = 0x62,
		CRITSEC_NETCHAN = 0x63,
		CRITSECT_SWITCHMAP_SV = 0x64,
		CRITSECT_SWITCHMAP_CL = 0x65,
		CRITSECT_DB_THROTTLE_DECOMPRESSION = 0x66,
		CRITSECT_PROFILE_BUF = 0x67,
		CRITSECT_SAVE_DEVICE = 0x68,
		CRITSECT_WATER_INTERACTION = 0x69,
		CRITSECT_WATER_GRID_ALLOC = 0x6A,
		CRITSECT_WATER_NODE_ALLOC = 0x6B,
		CRITSECT_MEM_PAGED = 0x6C,
		CRITSECT_ENTITY_COLL_LINK = 0x6D,
		CRITSECT_MINIZ = 0x6E,
		CRITSECT_COMPOSITING = 0x6F,
		CRITSECT_CREATE_DYNENT = 0x70,
		CRITSECT_LENSFLARES_INSTANCE_POOL_ACCESS0 = 0x71,
		CRITSECT_LENSFLARES_INSTANCE_POOL_ACCESS1 = 0x72,
		CRITSECT_LENSFLARES_INSTANCE_POOL_ACCESS2 = 0x73,
		CRITSECT_LENSFLARES_INSTANCE_POOL_ACCESS3 = 0x74,
		CRITSECT_LENSFLARES_INSTANCE_POOL_ACCESS4 = 0x75,
		CRITSECT_LENSFLARES_ACTIVE_INSTANCES_ACCESS0 = 0x76,
		CRITSECT_LENSFLARES_ACTIVE_INSTANCES_ACCESS1 = 0x77,
		CRITSECT_LENSFLARES_ACTIVE_INSTANCES_ACCESS2 = 0x78,
		CRITSECT_LENSFLARES_ACTIVE_INSTANCES_ACCESS3 = 0x79,
		CRITSECT_LENSFLARES_ACTIVE_INSTANCES_ACCESS4 = 0x7A,
		CRITSECT_LENSFLARES_SOURCE_ACCESS0 = 0x7B,
		CRITSECT_LENSFLARES_SOURCE_ACCESS1 = 0x7C,
		CRITSECT_LENSFLARES_SOURCE_ACCESS2 = 0x7D,
		CRITSECT_LENSFLARES_SOURCE_ACCESS3 = 0x7E,
		CRITSECT_LENSFLARES_SOURCE_ACCESS4 = 0x7F,
		CRITSECT_COMSCORE = 0x80,
		CRITSECT_DEBUG_TOPRIGHT_TXT = 0x81,
		CRITSECT_WEAPON_DOBJ_INFO_ALLOC = 0x82,
		CRITSECT_LIVE_ALLOC = 0x83,
		CRITSECT_UMBRA_SPOTOMNI_CACHE = 0x84,
		CRITSECT_UMBRA_JOB = 0x85,
		CRITSECT_COUNT = 0x86,
	};

	struct LuaScopedEventBase;
	struct ScopedCriticalSection
	{
		CriticalSection _s;
		bool _hasOwnership;
		bool _isScopedRelease;
		ScopedCriticalSection* _next;
	};

	typedef void (*LUA_EVENT_FUNC)(LuaScopedEventBase*);

	enum dvarFlags_e
	{
		DVAR_ARCHIVE = 1 << 0,
		DVAR_USERINFO = 1 << 1,
		DVAR_SYSTEMINFO = 1 << 2,
		DVAR_CODINFO = 1 << 3,
		DVAR_LATCH = 1 << 4,
		DVAR_ROM = 1 << 5,
		DVAR_SAVED = 1 << 6,
		DVAR_INIT = 1 << 7,
		DVAR_CHEAT = 1 << 8,
		//DVAR_UNKNOWN = 1 << 9,
		DVAR_EXTERNAL = 1 << 10,
		//DVAR_UNKNOWN3x = 1 << 11-13,
		DVAR_SESSIONMODE = 1 << 15
	};

	struct dvar_t
	{
		dvarStrHash_t name;
		const char* debugName;
		const char* description;
		dvarFlags_e flags;
		dvarType_t type;
		bool modified;
		DvarValue current;
		DvarValue latched;
		DvarValue reset;
		DvarLimits domain;
		dvar_t* hashNext;
	};

	struct LuaScopedEventBase
	{
		lua::lua_State* _vm;
		char _functionName[32];
		int _argCount;
		int _popCount;
		int _returnCount;
		bool _failed;
		bool _finished;
		bool _processed;
		ScopedCriticalSection _scopedCritSect;
		LUA_EVENT_FUNC _pushFn;
		LUA_EVENT_FUNC _returnFn;
	};

	struct  LuaScopedEvent : LuaScopedEventBase
	{
	};

	struct __declspec(align(8)) LUIScopedEvent : LuaScopedEvent
	{
		bool _initializedWithElement;
	};

	struct TTFKerningEntry
	{
		uint16_t height;
		uint16_t prevCharIndex;
		uint16_t nextCharIndex;
		int16_t kerning;
	};

	struct TTFDef
	{
		const char* name;
		int fileLen;
		const char* file;
		void* ftFace;
		TTFKerningEntry kerningCache[16384];
	};

	typedef void* MaterialHandle; // typedef Material* MaterialHandle;
	typedef MaterialHandle LUA_MATERIAL_DATATYPE;

	struct __declspec(align(8)) LUIAnimationState
	{
		LUA_MATERIAL_DATATYPE material;
		TTFDef* font;
		uint64_t flags;
		int luaRef;
		unsigned __int8 tweenFlags;
		int ui3DWindow;
		float leftPct;
		float topPct;
		float rightPct;
		float bottomPct;
		float leftPx;
		float topPx;
		float rightPx;
		float bottomPx;
		float globalLeft;
		float globalTop;
		float globalRight;
		float globalBottom;
		float zoom;
		float xRot;
		float yRot;
		float zRot;
		float scale;
		float red;
		float green;
		float blue;
		float alpha;
		vec4_t shaderVector0;
		vec4_t shaderVector1;
		vec4_t shaderVector2;
		vec4_t shaderVector3;
		vec4_t shaderVector4;
	};

	struct __declspec(align(8)) LUIElement
	{
		LUIAnimationState currentAnimationState;
		LUIElement* parent;
		LUIElement* prevSibling;
		LUIElement* nextSibling;
		LUIElement* firstChild;
		LUIElement* lastChild;
	};

	struct XAnimNotifyInfo
	{
		ScrString_t type;
		float time;
		ScrString_t param1;
		ScrString_t param2;
	};
}